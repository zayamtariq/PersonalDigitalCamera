/**
 * @file Blynk.h
 * @author Jonathan Valvano, Matthew Yu (matthewjkyu@gmail.com)
 * @brief API for sending commands to and from Blynk using the ESP8266.
 *        TM4C <- UART -> ESP8266 <- WiFi -> Blynk Server
 * @version 0.1
 * @date 2022-09-07
 * @note Hardware setup:
 * TM4C123       ESP8266-ESP01 (2 by 4 header)
 * PE5 (U5TX) to Pin 1 (Rx)
 * PE4 (U5RX) to Pin 5 (TX)
 * PE3 output debugging
 * PE2 nc
 * PE1 output    Pin 7 Reset
 * PE0 input     Pin 3 Rdy IO2
 *               Pin 2 IO0, 10k pullup to 3.3V  
 *               Pin 8 Vcc, 3.3V (separate supply from LaunchPad 
 * Gnd           Pin 4 Gnd  
 * Place a 4.7uF tantalum and 0.1 ceramic next to ESP8266 3.3V power pin
 * Use LM2937-3.3 and two 4.7 uF capacitors to convert USB +5V to 3.3V for the ESP8266
 * http://www.ti.com/lit/ds/symlink/lm2937-3.3.pdf
 */
#pragma once

#include <stdbool.h>
#include <stdint.h>

/**
 * @brief Struct for holding a CSV data entry from Blynk.
 */
typedef struct blynk_info {
    uint32_t pin_number;
    uint32_t integer_value;
    float float_value;
} blynk_info_t, *blynk_info_ptr_t;

/**
 * @brief Sends data to the blynk server.
 * 
 * @param pin The virtual pin number [70, 99] that represents the input.
 * @param value The value of the input to send.
 */
void tm4c_to_blynk(const blynk_info_t info);

/**
 * @brief Receives data from the blynk server in the format 
 *        `Pin #, Integer Value, Float Value`. 
 * 
 * @return blynk_info_t 
 */
blynk_info_t blynk_to_tm4c(void);

/**
 * @brief Initializes blynk communication.
 * 
 * @param wifi_ssid SSID of the wifi network to connect to.
 * @param wifi_pass password of the wifi network to connect to.
 * @param blynk_auth_token token provided by Blynk to connect to Blynk server instance.
 * @param use_timer_interrupt Determines whether to set Timer2A to run an
 *        interrupt handler pulling data from the ESP8266 at 10ms period.
 *        If TRUE, use the timer interrupt.
 */
void blynk_init(char *wifi_ssid, char *wifi_pass, char *blynk_auth_token, bool use_timer_interrupt);

/**
 * @brief Pull an entry from the queue of blynk_info_t generated by blynk_handler. 
 * 
 * @param info Reference to an info struct to be filled.
 * @return true info holds data on completion.
 * @return false info does NOT hold data on completion.
 * @note No effect if timer is not enabled.
 */
bool blynk_get_data_from_queue(blynk_info_t *info);
